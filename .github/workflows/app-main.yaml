name: Build and deploy App
on:
  push:
    branches:
      - main
    paths:
      - 'app/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_APP: tjanl/app-${{ github.event.repository.name }}

jobs:
  build-and-push-app-image:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHRC_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            API_HOST=http://${{ secrets.TS_NODE_IP }}:8000
            COMMIT=${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-app-image
    steps:
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.66.4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHRC_TOKEN }}

      - name: Deploy App
        uses: TjanL/diplomska/actions/js/deploy@main
        with:
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_docker_host: "bot@${{ secrets.TS_NODE_IP }}"
          docker_image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}@${{ needs.build-and-push-app-image.outputs.digest }}"
          container_name: "app"
          ports: "8080:80"
          network: "prod"
